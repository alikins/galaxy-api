openapi: "3.0.0"

info:
  version: 0.1.0
  title: Galaxy API
  license:
    name: Apache-2.0
  description: |
    # Introduction

    This is the <a href="https://www.openapis.org">OpenAPI</a> specification 
    for the **Red Hat Ansible Automation Hub** API.

    ## OpenAPI Information
    <a target="_top" href="https://swagger.io/docs/specification/about/">Swagger.io OpenAPI documentation</a>

    <a target="_top" href="https://github.com/OAI/OpenAPI-Specification/blob/master/versions/3.0.2.md">OpenAPI Specification</a>

    <a target="_top" href="https://github.com/ansible/galaxy-api/blob/master/openapi/openapi.yaml">Download the Automation Hub OpenAPI Specification</a>.


    # API Conventions
    ## Pagination

    Resource lists are always paginated.

    This pagination format is based on the
    <a href="https://jsonapi.org/format/#document-structure">JSON API document
    structure.</a>

     The response will look similar to this:

    ```json

    {
      "meta": {
        "count": 5
      },
      "links": {
        "first": "/namespaces/?offset=0&limit=1",
        "last": "/namespaces/?offset=7&limit=1",
        "next": "/namespaces/?offset=5&limit=1",
        "previous": "/namespaces/?offset=3&limit=1"
      },
      "data": [
        {
          "name": "my_namespace"
        }
      ]
    }
    ```

    ## Errors

    Error responses always have a top level object with an 'errors' field.

    The value of the 'errors' field is a list of Error objects.

    Example `Errors` response for a 404 on `GET /unicorn/11`

    ```json
      {
       "errors": [
        {
          "code": "not_found",
          "detail": "Record /unicorn/11 was not found",
          "title": "Record not found.",
          "status": "404",
          "source": {
            "parameter": "string",
            "pointer": "string"
            }
          }
      ]
    }
    ```



paths:

# -------------------------------------
# Namespaces
# -------------------------------------
  '/namespaces/':
    get:
      summary: List namespaces
      operationId: listNamespaces
      tags:
        - Namespaces
      responses:
        '200':
          description: 'Paginated list of Namespaces'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NamespacesPage'
        'default':
          $ref: '#/components/responses/Errors'
    post:
      summary: Create a namespace
      tags:
        - Namespaces
      requestBody:
        $ref: '#/components/requestBodies/Namespace'
      responses:
        '201':
          $ref: '#/components/responses/Namespace'
        'default':
          $ref: '#/components/responses/Errors'

  '/namespaces/{name}/':
    parameters:
      - description: 'Namespace name'
        in: path
        name: name
        required: true
        schema:
          $ref: '#/components/schemas/NamespaceName'
    get:
      summary: Get Namespace
      operationId: getNamespace
      tags:
        - Namespaces
      responses:
        '200':
          $ref: '#/components/responses/Namespace'
        'default':
          $ref: '#/components/responses/Errors'
    put:
      summary: Update Namespace
      operationId: updateNamespace
      tags:
        - Namespaces
      requestBody:
        $ref: '#/components/requestBodies/Namespace'
      responses:
        '200':
          $ref: '#/components/responses/Namespace'
        'default':
          $ref: '#/components/responses/Errors'
    delete:
      summary: Delete Namespace
      operationId: deleteNamespace
      tags:
        - Namespaces
      responses:
        '204':
          description: 'Namespace deletion was successful'
        'default':
          $ref: '#/components/responses/Errors'

# -------------------------------------
# Collections
# -------------------------------------
  '/collections/':
    get:
      summary: List Collections
      operationId: listCollections
      parameters:
        - $ref: '#/components/parameters/PageOffset'
        - $ref: '#/components/parameters/PageLimit'
        - $ref: '#/components/parameters/Search'
      tags:
        - Collections
      responses:
        '200':
          $ref: '#/components/responses/CollectionList'
        'default':
          $ref: '#/components/responses/Errors'
    post:
      summary: Upload Collection
      operationId: uploadCollection
      tags:
        - Collections
      requestBody:
        $ref: '#/components/requestBodies/CollectionVersionArtifactBody'
      responses:
        '202':
          $ref: '#/components/responses/CollectionImportAccepted'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '409':
          $ref: '#/components/responses/Conflict'
        default:
          $ref: '#/components/responses/Errors'

  '/collections/{namespace}/{name}/':
    parameters:
      - $ref: '#/components/parameters/CollectionNamespaceName'
      - $ref: '#/components/parameters/CollectionName'
    get:
      summary: Get Collection
      operationId: getCollection
      tags:
        - Collections
      responses:
        '200':
          $ref: '#/components/responses/Collection'
        'default':
            $ref: '#/components/responses/Errors'
    put:
      summary: Update Collection
      operationId: updateCollection
      tags:
        - Collections
      parameters: []
      requestBody:
        $ref: '#/components/requestBodies/Collection'
      responses:
        '200':
          $ref: '#/components/responses/CollectionUpdateAccepted'
        '401':
          $ref: '#/components/responses/Unauthorized'
        'default':
            $ref: '#/components/responses/Errors'

  '/collections/{namespace}/{name}/versions/':
    parameters:
      - $ref: '#/components/parameters/CollectionNamespaceName'
      - $ref: '#/components/parameters/CollectionName'
    get:
      summary: List Collection Versions
      operationId: listCollectionVersions
      tags:
        - Collections
      parameters:
        - $ref: '#/components/parameters/PageOffset'
        - $ref: '#/components/parameters/PageLimit'
      responses:
        '200':
          $ref: '#/components/responses/CollectionVersionList'
        'default':
          $ref: '#/components/responses/Errors'

  '/collections/{namespace}/{name}/versions/{version}/':
    parameters:
      - $ref: '#/components/parameters/CollectionNamespaceName'
      - $ref: '#/components/parameters/CollectionName'
      - $ref: '#/components/parameters/SemanticVersion'
    get:
      summary: Get Collection Version
      operationId: getCollectionVersions
      tags:
        - Collections
      parameters: []
      responses:
        '200':
          $ref: '#/components/responses/CollectionVersion'
        'default':
          $ref: '#/components/responses/Errors'

  '/collections/{namespace}/{name}/versions/{version}/artifact/':
    parameters:
      - $ref: '#/components/parameters/CollectionNamespaceName'
      - $ref: '#/components/parameters/CollectionName'
      - $ref: '#/components/parameters/SemanticVersion'
    get:
      summary: Get Collection Version Artifact
      operationId: getCollectionVersionArtifact
      tags:
        - Collections
      responses:
        '200':
          $ref: '#/components/responses/CollectionVersionArtifact'
        'default':
          $ref: '#/components/responses/Errors'

# -------------------------------------
# Imports
# -------------------------------------
  '/imports/collections/':
    get:
      summary: List Collection Imports
      operationId: listCollectionImports
      tags:
        - Imports
      responses:
        '200':
          $ref: '#/components/responses/CollectionImportList'
        'default':
          $ref: '#/components/responses/Errors'

  '/imports/collections/{id}/':
    get:
      summary: Get Collection Import
      operationId: getCollectionImport
      parameters:
        - $ref: '#/components/parameters/CollectionImportId'
      tags:
        - Imports
      responses:
        '200':
          $ref: '#/components/responses/CollectionImport'
        'default':
          $ref: '#/components/responses/Errors'

# -------------------------------------
# Downloads
# -------------------------------------
  '/downloads/collections/{filename}':
    get:
      summary: Download Collection Artifact
      operationId: downloadCollection
      tags:
        - Downloads
      parameters:
        - $ref: '#/components/parameters/CollectionVersionArtifactFilename'
      responses:
        '200':
          $ref: '#/components/responses/CollectionVersionArtifactDownload'
        'default':
          $ref: '#/components/responses/Errors'

# -------------------------------------
# Search
# -------------------------------------


  '/search/tags/':
    get:
      summary: Search Tags
      operationId: searchTags
      tags:
        - Search
      responses:
        '200':
          description: A paginated list of Tags
        'default':
          $ref: '#/components/responses/Errors'

# -------------------------------------
# Users
# -------------------------------------
  '/users/':
    get:
      summary: List Users
      operationId: listUsers
      tags:
        - Users
      responses:
        '200':
          $ref: '#/components/responses/UserList'
        'default':
          $ref: '#/components/responses/Errors'


  '/users/{id}/':
    get:
      summary: Get User
      operationId: getUser
      tags:
        - Users
      parameters:
        - description: 'Username'
          in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        '200':
          $ref: '#/components/responses/User'
        'default':
          $ref: '#/components/responses/Errors'


# -------------------------------------
# Profile
# -------------------------------------
  '/profile/':
    get:
      summary: Get Profile
      operationId: getProfile
      description: Returns information about the current User.
      tags:
        - Profile
      responses:
        '200':
          $ref: '#/components/responses/User'
        'default':
          $ref: '#/components/responses/Errors'

components:
  schemas:

    Collection:
      title: 'Collection'
      description: 'Ansible content collection'
      type: object
      properties:
        name:
          description: 'Collection name. Must be lower case containing
                        only alphanumeric characters and underscores.'
          type: string
          maxLength: 64
          readOnly: true
        namespace:
          $ref: '#/components/schemas/CollectionNamespace'
        latest_version:
          $ref: '#/components/schemas/CollectionVersionLink'
        created:
          type: string
          readOnly: true
        deprecated:
          type: boolean
        modified:
          type: string
          readOnly: true
        id:
          type: integer
          readOnly: true
        href:
          type: string
          format: uri
        versions_url:
          type: string
      required:
        - name
        - remote_id
        - namespace

    CollectionCreationResult:
      title: 'CollectionCreationResult'
      description: 'A map of collection import task info, including its url'
      type: object
      properties:
        task:
          description: >
            The url for the queued collection import task.
            Check it for progress and status.
          type: string
          format: uri

    CollectionNamespace:
      type: object
      title: 'CollectionNamespace'
      properties:
        name:
          $ref: '#/components/schemas/NamespaceName'
        id:
          type: integer
        href:
          description: 'link to the Namespace'
          type: string
          format: uri

    CollectionsPage:
      description: 'A page of a list of Collections'
      allOf:
        - $ref: '#/components/schemas/PageInfo'
        - type: object
          properties:
            data:
              description: 'List of Collections for this Page'
              title: 'Collections'
              type: array
              items:
                $ref: '#/components/schemas/Collection'
          required:
            - data

    CollectionVersion:
      description: 'Collection Version'
      title: 'Collection Version'
      type: object
      # TODO: unknown schema yet

    CollectionVersionArtifact:
      description: 'Collection Version Artifact Details'
      title: 'Collection Version Artifact'
      type: object
      # TODO: unknown schema yet

    CollectionVersionArtifactData:
      description: >
        CollectionVersionArtifact archive file binary and sha256 checksum.
        Used for importing collection artifacts
      type: object
      properties:
        sha256:
          description: 'The sha256sum of the collection artifact file'
          type: string
        file:
          description: 'The binary contents of a collection artifact'
          type: string
          format: binary

    CollectionVersionLink:
      title: 'Collection Version Link'
      type: object
      properties:
        href:
          description: 'The URL to the CollectionVersion'
          type: string
        version:
          $ref: '#/components/schemas/SemanticVersion'

    CollectionVersionsPage:
      description: 'A page of a list of CollectionVersions'
      allOf:
        - $ref: '#/components/schemas/PageInfo'
        - type: object
          properties:
            data:
              description: 'List of CollectionVersions for this Page'
              title: 'CollectionVersions'
              type: array
              items:
                $ref: '#/components/schemas/CollectionVersion'
          required:
            - data

    CollectionImport:
      description: 'Collection import'
      title: 'CollectionImport'
      type: object
      # TODO: unknown schema yet

    CollectionImportsPage:
      description: 'A page of a list of CollectionImports'
      allOf:
        - $ref: '#/components/schemas/PageInfo'
        - type: object
          properties:
            data:
              description: 'List of CollectionImports for this Page'
              title: 'CollectionImports'
              type: array
              items:
                $ref: '#/components/schemas/CollectionImport'
          required:
            - data

    Errors:
      title: 'Errors'
      description: "A list of JSON API Error objects"
      type: object
      externalDocs:
        description: 'JSON API Error Specification'
        url: 'https://jsonapi.org/format/#errors'
      properties:
        errors:
          type: array
          title: 'Errors'
          items:
            $ref: '#/components/schemas/Error'
          minItems: 1
      required:
        - errors

    Error:
      title: 'Error'
      description: "A JSON API Error object"
      externalDocs:
        description: 'JSON API Error Specification'
        url: 'https://jsonapi.org/format/#error-objects'
      type: object
      properties:
        code:
          description: 'Unique identifier for the error'
          type: string
          example: 'not_found'
        detail:
          type: string
          description: >
            A human-readable explanation specific to this
            occurrence of the problem
          example: 'Record /unicorn/11 was not found'
        title:
          type: string
          description: 'A short, human-readable summary of the problem'
          example: 'Record not found.'
        status:
          type: string
          description: 'String representation of HTTP status code'
          example: '404'
        source:
          type: object
          properties:
            parameter:
              description: >
                A string indicating which URI query parameter
                caused the error.
              type: string
            pointer:
              description: >
                A JSON Pointer [RFC6901] to the associated entity
                in the request document
              type: string
      required:
        - detail
        - status

    Namespace:
      title: 'Namespace'
      description: 'An Ansible content Namespace'
      type: object
      properties:
        name:
          readOnly: true
          $ref: '#/components/schemas/NamespaceName'
        company:
          description: Namespace owner company name
          type: string
          maxLength: 64
        email:
          description: Namespace contact email
          type: string
          format: email
          maxLength: 256
        avatar_url:
          description: Namespace logo URL
          type: string
          format: uri
          maxLength: 256
        description:
          description: Namespace brief description
          type: string
          maxLength: 256
        links:
          description: Related links
          type: array
          items:
            $ref: '#/components/schemas/NamespaceLink'

    NamespaceLink:
      title: Namespace Link
      type: object
      description: Namespace URL links
      properties:
        name:
          type: string
          maxLength: 32
          example: Homepage
        url:
          type: string
          format: uri
          maxLength: 256
          example: http://example.com
      required:
        - name
        - url

    NamespaceName:
      title: 'NamespaceName'
      description: >
          Namespace name. Must be lower case containing
          only alphanumeric characters and underscores.
      type: string
      maxLength: 64
      example: 'my_namespace'
      pattern: '^(?!.*__)[a-z]+[0-9a-z_]*$'

    NamespacesPage:
      description: "Paginated list of Namespaces"
      allOf:
        - $ref: '#/components/schemas/PageInfo'
        - type: object
          properties:
            data:
              description: 'List of Namespaces for this page'
              title: 'Namespaces'
              type: array
              items:
                $ref: '#/components/schemas/Namespace'
          required:
            - data

    PageInfo:
      description: 'Pagination info'
      title: 'Page Info'
      properties:
        meta:
          $ref: '#/components/schemas/PageMeta'
        links:
          $ref: '#/components/schemas/PageLinks'
      required:
        - meta
        - links

    PageLinks:
      type: object
      title: 'PageLinks'
      properties:
        first:
          type: string
          description: 'Link to first page'
          format: uri
          example: '/namespaces/?offset=0&limit=1'
        last:
          type: string
          description: 'Link to last page'
          format: uri
          example: '/namespaces/?offset=7&limit=1'
        next:
          type: string
          description: 'Link to next page'
          format: uri
          example: '/namespaces/?offset=5&limit=1'
          nullable: true
        previous:
          type: string
          description: 'Link to previous page'
          format: uri
          example: '/namespaces/?offset=3&limit=1'
          nullable: true
      required:
        - first
        - last
        - next
        - previous

    PageMeta:
      title: 'PageMeta'
      type: object
      properties:
        count:
          description: 'The number of items in this Page'
          type: integer
          example: 5
      required:
        - count

    SemanticVersion:
      description: 'A version string in the Semantic Version form'
      type: string
      pattern: ^((([0-9]+)\.([0-9]+)\.([0-9]+)(?:-([0-9a-zA-Z-]+(?:\.[0-9a-zA-Z-]+)*))?)(?:\+([0-9a-zA-Z-]+(?:\.[0-9a-zA-Z-]+)*))?)$
      example: '1.0.1'

    User:
      title: 'User'
      description: 'Automation Hub User'
      type: object

    UsersPage:
      description: "Paginated list of Users"
      allOf:
        - $ref: '#/components/schemas/PageInfo'
        - type: object
          properties:
            data:
              description: 'List of Users for this Page'
              title: 'Users'
              type: array
              items:
                $ref: '#/components/schemas/User'
          required:
            - data


  parameters:

    CollectionNamespaceName:
      description: 'The collection namespace name'
      in: path
      name: namespace
      required: true
      schema:
        $ref: '#/components/schemas/NamespaceName'

    CollectionName:
      description: 'The collection name'
      in: path
      name: name
      required: true
      schema:
        type: string
        pattern: ^(?!.*__)[a-z]+[0-9a-z_]*$'

    CollectionVersionArtifactFilename:
      description: 'CollectionVersion artifact filename'
      in: path
      name: filename
      required: true
      schema:
        type: string
      example: 'testing.nginx-1.2.3.tar.gz'

    CollectionImportId:
      description: 'A unique integer value identifying a collection import.'
      in: path
      name: id
      required: true
      schema:
        type: string
    PageLimit:
      description: 'Number of results to return per page.'
      in: query
      name: limit
      required: false
      schema:
        type: integer
        default: 10
        minimum: 1
        maximum: 100

    PageOffset:
      description: 'Page offset number within the paginated result set'
      in: query
      name: offset
      required: false
      schema:
        type: integer
        default: 0
        minimum: 0

    Search:
      description: 'Term to search for'
      in: query
      name: search
      required: false
      schema:
        type: string

    SemanticVersion:
      description: 'A Semantic Version string'
      in: path
      name: version
      required: true
      schema:
        $ref: '#/components/schemas/SemanticVersion'

  requestBodies:
    Collection:
      description: 'A Collection body'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Collection'

    CollectionVersionArtifactBody:
      description: >
        A multipart/form encoded payload including the binary
        collection artifact file contents and it's sha256sum
      content:
        multipart/form-data:
          schema:
            $ref: '#/components/schemas/CollectionVersionArtifactData'

    Namespace:
      description: "A Namespace body"
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Namespace'

  responses:

    Collection:
      description: 'Response containing a Collection'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Collection'

    CollectionList:
      description: 'Response containing a page of Collections'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/CollectionsPage'

    CollectionVersion:
      description: 'Response contain a CollectionVersion'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/CollectionVersion'

    CollectionVersionList:
      description: 'Response containing a page of CollectionVersions'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/CollectionVersionsPage'

    CollectionVersionArtifact:
      description: 'Response containing a CollectionVersionArtifact'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/CollectionVersionArtifact'

    CollectionVersionArtifactDownload:
      description: 'The collection artifact file binary contents'
      content:
        application/octet-stream:
          schema:
            title: 'CollectionVersionArtifactDownload'
            description: 'The collection artifact file binary contents'
            type: string
            format: binary

    CollectionImportAccepted:
      description: >
        Result of an accepted collection import.
        Includes the url of the import task
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/CollectionCreationResult'

    CollectionUpdateAccepted:
      description: 'Result of an accepted collection update.'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Collection'

    Conflict:
      description: 'Conflict Error'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Errors'

    CollectionImport:
      description: The requested Collection Import
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/CollectionImport'

    CollectionImportList:
      description: Collection Imports
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/CollectionImportsPage'
    Errors:
      description: 'Errors'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Errors'

    Namespace:
      description: 'Response with a Namespace'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Namespace'

    NotFound:
      description: 'Not Found (404)'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Errors'

    Profile:
      description: 'Response with the current User'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/User'

    Unauthorized:
      description: 'Unauthorized (401)'
      headers:
        WWW-Authenticate:
          schema:
            type: string
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Errors'

    User:
      description: 'Response with an User'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/User'

    UserList:
      description: 'Paginated list of Users'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/UsersPage'
