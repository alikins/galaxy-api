info:
  description: 'Automation Hub'
  title: 'Automation Hub API'
  version: "0.0.1"
  contact:
    url: https://github.com/ansible/galaxy-dev/issues
    name: 'Ansible galaxy-dev Issues'

openapi: 3.0.0

servers:
  - url: http://localhost:5001/api/v3
    description: 'local dev server'

externalDocs:
  description: 'General docs about Ansible Galaxy'
  url: https://galaxy.ansible.com/docs/
paths:

  '/collections/':
    get:
      summary: 'Get a list of the Collections'
      operationId: getCollections
      parameters:
        - $ref: '#/components/parameters/PageOffset'
        - $ref: '#/components/parameters/PageLimit'
      tags:
        - collections
      responses:
        '200':
          $ref: '#/components/responses/Collections'
        'default':
          $ref: '#/components/responses/Error'

    post:
      summary: 'Upload Collection Artifact'
      operationId: uploadCollectionVersionArtifact
      tags:
        - collections
      parameters: []
      requestBody:
        $ref: '#/components/requestBodies/CollectionVersionArtifactBody'
      responses:
        '202':
          $ref: '#/components/responses/CollectionImportAccepted'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '409':
          $ref: '#/components/responses/Conflict'
        default:
          $ref: '#/components/responses/Error'

  '/collections/{namespace}/{name}/':
    parameters:
      - $ref: '#/components/parameters/CollectionNamespaceName'
      - $ref: '#/components/parameters/CollectionName'
    get:
      summary: 'Get Collection'
      operationId: getCollection
      tags:
        - collections
      responses:
        '200':
          description: 'The requested Collection'
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/Collection'
        'default':
          $ref: '#/components/responses/Error'

    put:
      summary: 'Update Collection'
      operationId: updateCollection
      tags:
        - collections
      parameters: []
      requestBody:
        $ref: '#/components/requestBodies/Collection'
      responses:
        '200':
          $ref: '#/components/responses/CollectionUpdateAccepted'
        '401':
          $ref: '#/components/responses/Unauthorized'
        'default':
          $ref: '#/components/responses/Error'

  '/collections/{namespace}/{name}/versions/':
    parameters:
      - $ref: '#/components/parameters/CollectionNamespaceName'
      - $ref: '#/components/parameters/CollectionName'
    get:
      summary: 'List Collection Versions'
      operationId: listCollectionVersions
      tags:
        - collections
      parameters:
        - $ref: '#/components/parameters/PageOffset'
        - $ref: '#/components/parameters/PageLimit'
      responses:
        '200':
          $ref: '#/components/responses/CollectionVersions'
        'default':
          $ref: '#/components/responses/Error'

  '/collections/{namespace}/{name}/versions/{version}/':
    parameters:
      - $ref: '#/components/parameters/CollectionNamespaceName'
      - $ref: '#/components/parameters/CollectionName'
      - $ref: '#/components/parameters/SemanticVersion'
    get:
      summary: 'Get a CollectionVersion by namespace, name, and version'
      operationId: getCollectionVersion
      tags:
        - collections
      parameters: []
      responses:
        '200':
          $ref: '#/components/responses/CollectionVersion'
        'default':
          $ref: '#/components/responses/Error'

  '/collections/{namespace}/{name}/versions/{version}/artifact/':
    parameters:
      - $ref: '#/components/parameters/CollectionNamespaceName'
      - $ref: '#/components/parameters/CollectionName'
      - $ref: '#/components/parameters/SemanticVersion'
    get:
      summary: 'Get Collection Version Artifact'
      operationId: getCollectionVersionArtifact
      tags:
        - collections
      parameters: []
      responses:
        '200':
          description: The requested Collection Version Artifact
        'default':
          $ref: '#/components/responses/Error'

  '/downloads/collections/{filename}':
    get:
      summary: Download Collection Artifact
      operationId: downloadCollection
      tags:
        - Downloads
      parameters:
        - $ref: '#/components/parameters/CollectionVersionArtifactFilename'
      responses:
        '200':
          $ref: '#/components/responses/CollectionVersionArtifactDownload'
        'default':
          $ref: '#/components/responses/Error'

  '/imports/collections/':
    get:
      summary: List Collection Imports
      operationId: listCollectionImports
      tags:
        - Imports
      responses:
        '200':
          $ref: '#/components/responses/CollectionImports'
        'default':
          $ref: '#/components/responses/Error'

  '/imports/collections/{id}/':
    get:
      summary: Get Collection Import
      operationId: getCollectionImport
      parameters:
        - $ref: '#/components/parameters/CollectionImportId'
      tags:
        - Imports
      responses:
        '200':
          $ref: '#/components/responses/CollectionImport'
        'default':
          $ref: '#/components/responses/Error'

  '/namespaces/':
    get:
      summary: 'List Namespaces'
      operationId: listNamespaces
      tags:
        - namespaces
      parameters:
        - $ref: '#/components/parameters/PageOffset'
        - $ref: '#/components/parameters/PageLimit'
      responses:
        '200':
          $ref: '#/components/responses/Namespaces'
        'default':
          $ref: '#/components/responses/Error'

    post:
      summary: 'Create a Namespace'
      operationId: createNamespace
      tags:
        - namespaces
      parameters: []
      requestBody:
        $ref: '#/components/requestBodies/Namespace'
      responses:
        '201':
            $ref: '#/components/responses/Namespace'
        'default':
          $ref: '#/components/responses/Error'

  '/namespaces/{name}/':
    get:
      summary: 'Get a Namespace'
      operationId: getNamespace
      tags:
        - namespaces
      responses:
        '200':
            $ref: '#/components/responses/Namespace'
        'default':
          $ref: '#/components/responses/Error'

    delete:
      summary: 'Delete a Namespace'
      operationId: deleteNamespace
      parameters:
        - $ref: '#/components/parameters/NamespaceName'
      responses:
        '204':
          $ref: '#/components/responses/DeleteSuccessful'
        'default':
          $ref: '#/components/responses/Error'
      tags:
        - namespaces

  '/search/collections/':
    get:
      summary: Search Collections
      operationId: searchCollections
      tags:
        - Search
      parameters:
        - $ref: '#/components/parameters/PageOffset'
        - $ref: '#/components/parameters/PageLimit'
      responses:
        '200':
          $ref: '#/components/responses/Collections'
        'default':
          $ref: '#/components/responses/Error'

  '/search/tags/':
    get:
      summary: Search Tags
      operationId: searchTags
      tags:
        - Search
      parameters:
        - $ref: '#/components/parameters/PageOffset'
        - $ref: '#/components/parameters/PageLimit'
      responses:
        '200':
          $ref: '#/components/responses/Tags'
        'default':
          $ref: '#/components/responses/Error'

  '/users/':
    get:
      summary: List Users
      operationId: listUsers
      tags:
        - Users
      responses:
        '200':
          $ref: '#/components/responses/Users'
        'default':
          $ref: '#/components/responses/Error'

  '/users/{id}/':
    get:
      summary: Get User
      operationId: getUser
      tags:
        - Users
      responses:
        '200':
          $ref: '#/components/responses/User'
        'default':
          $ref: '#/components/responses/Error'

  '/profile/':
    get:
      summary: Get Profile
      operationId: getProfile
      description: Returns information about the current User.
      tags:
        - Profile
      responses:
        '200':
          $ref: '#/components/responses/User'
        'default':
          $ref: '#/components/responses/Error'

components:
  schemas:
    Collection:
      title: 'Collection'
      description: 'Ansible content collection'
      type: object
      properties:
        name:
          description: 'Collection name. Must be lower case containing
                        only alphanumeric characters and underscores.'
          type: string
          maxLength: 64
          readOnly: true
        remote_id:
          description: 'Collection ID in remote database'
          type: string
          format: uuid
          readOnly: true
        quality_score:
          type: number
          format: float
          nullable: true
        namespace:
          $ref: '#/components/schemas/Namespace'
      required:
        - name
        - remote_id
        - namespace

    CollectionCreationResult:
      title: 'CollectionCreationResult'
      description: 'A map of collection import task info, including its url'
      type: object
      properties:
        task:
          description: 'The url for the queued collection import task. Check it for progress and status.'
          type: string
          format: uri

    CollectionImport:
      description: 'Collection import'
      title: 'CollectionImport'
      type: object
      # TODO: unknown schema yet

    CollectionImportsPage:
      description: 'A page of a list of CollectionImports'
      allOf:
        - $ref: '#/components/schemas/PageInfo'
        - type: object
          properties:
            data:
              description: 'List of CollectionImports for this Page'
              title: 'CollectionImports'
              type: array
              items:
                $ref: '#/components/schemas/CollectionImport'
          required:
            - data

    CollectionsPage:
      description: 'A page of a list of Collections'
      allOf:
        - $ref: '#/components/schemas/PageInfo'
        - type: object
          properties:
            data:
              description: 'List of Collections for this Page'
              title: 'Collections'
              type: array
              items:
                $ref: '#/components/schemas/Collection'
          required:
            - data

    CollectionVersion:
      description: 'Collection Version'
      title: 'Collection Version'
      type: object
      # TODO: unknown schema yet


    CollectionVersionArtifactData:
      description: 'CollectionVersionArtifact archive file binary and sha256 checksum. Used for importing collection artifacts'
      type: object
      properties:
        sha256:
          description: 'The sha256sum of the collection artifact file'
          type: string
        file:
          description: 'The binary contents of a collection artifact'
          type: string
          format: binary

    CollectionVersionsPage:
      description: 'A page of a list of CollectionVersions'
      allOf:
        - $ref: '#/components/schemas/PageInfo'
        - type: object
          properties:
            data:
              description: 'List of CollectionVersions for this Page'
              title: 'CollectionVersions'
              type: array
              items:
                $ref: '#/components/schemas/CollectionVersion'
          required:
            - data

    Error:
      title: 'Error'
      description: "A JSON API Error object"
      type: object
      externalDocs:
        description: 'JSON API Error Specification'
        url: 'https://jsonapi.org/format/#errors'
      properties:
        errors:
          type: array
          title: 'ErrorItems'
          items:
            $ref: '#/components/schemas/ErrorItem'
          minItems: 1
      required:
        - errors

    ErrorItem:
      title: 'ErrorItem'
      description: 'An item returned in the Error "errors" value'
      externalDocs:
        description: 'JSON API Error Specification'
        url: 'https://jsonapi.org/format/#errors'
      type: object
      properties:
        code:
          description: 'Unique identifier for the error'
          type: string
          example: 'not_found'
        detail:
          type: string
          description: 'Error detail'
          example: 'Record not found.'
        status:
          type: string
          description: 'String representation of HTTP status code'
          example: '404'
        source:
          type: object
          properties:
            parameter:
              description: 'A string indicating which URI query parameter caused the error.'
              type: string
            pointer:
              description: 'A JSON Pointer [RFC6901] to the associated entity in the request document '
              type: string
      required:
        - detail
        - status

    Namespace:
      title: 'Namespace'
      description: 'An Ansible content Namespace'
      type: object
      properties:
        name:
          $ref: '#/components/schemas/NamespaceName'
      required:
       - name

    NamespaceName:
      title: 'NamespaceName'
      description: 'Namespace name. Must be lower case containing only alphanumeric characters and underscores'
      type: string
      maxLength: 64
      example: 'my_namespace'
      pattern: '^(?!.*__)[a-z]+[0-9a-z_]*$'

    NamespacesPage:
      description: "A Page of a list of Namespaces"
      allOf:
        - $ref: '#/components/schemas/PageInfo'
        - type: object
          properties:
            data:
              description: 'List of Namespaces for this Page'
              title: 'Namespaces'
              type: array
              items:
                $ref: '#/components/schemas/Namespace'
          required:
            - data

    PageCount:
      description: 'The number of items in this Page'
      type: integer
      example: 5

    PageInfo:
      description: 'Pagination info'
      title: 'Page Info'
      properties:
        meta:
          $ref: '#/components/schemas/PageMeta'
        links:
          $ref: '#/components/schemas/PageLinks'
      required:
        - meta
        - links

    PageLinks:
      type: object
      title: 'PageLinks'
      properties:
        first:
          type: string
          description: 'Link to first page'
          format: uri
          example: '/namespaces/?offset=0&limit=1'
        last:
          type: string
          description: 'Link to last page'
          format: uri
          example: '/namespaces/?offset=7&limit=1'
        next:
          type: string
          description: 'Link to next page'
          format: uri
          example: '/namespaces/?offset=5&limit=1'
          nullable: true
        previous:
          type: string
          description: 'Link to next page'
          format: uri
          example: '/namespaces/?offset=3&limit=1'
          nullable: true
      required:
        - first
        - last
        - next
        - previous

    PageMeta:
      title: 'PageMeta'
      type: object
      properties:
        count:
          $ref: '#/components/schemas/PageCount'
      required:
        - count

    SemanticVersion:
      description: 'A version string in the Semantic Version form'
      type: string
      pattern: ^((([0-9]+)\.([0-9]+)\.([0-9]+)(?:-([0-9a-zA-Z-]+(?:\.[0-9a-zA-Z-]+)*))?)(?:\+([0-9a-zA-Z-]+(?:\.[0-9a-zA-Z-]+)*))?)$
      example: '1.0.1'

    Tag:
      title: 'Tag'
      description: 'Ansible collection tag'
      type: object
      # TODO: unknown Tag schema

    TagsPage:
      description: "A Page of a list of Tags"
      allOf:
        - $ref: '#/components/schemas/PageInfo'
        - type: object
          properties:
            data:
              description: 'List of Tags for this Page'
              title: 'Tags'
              type: array
              items:
                $ref: '#/components/schemas/Tag'
          required:
            - data

    Tenant:
      title: 'Tenant'
      description: 'Tenant is a special model that usually represents user or
                    group (organization). It allows configuring objects permissions
                    or ownership more flexibly.'
      type: object

    User:
      title: 'User'
      description: 'Automation Hub User'
      type: object

    UsersPage:
      description: "A Page of a list of Users"
      allOf:
        - $ref: '#/components/schemas/PageInfo'
        - type: object
          properties:
            data:
              description: 'List of Users for this Page'
              title: 'Users'
              type: array
              items:
                $ref: '#/components/schemas/User'
          required:
            - data


  parameters:
    CollectionImportId:
      description: 'A unique integer value identifying a collection import.'
      in: path
      name: id
      required: true
      schema:
        type: string

    CollectionNamespaceName:
      description: 'The collection namespace name'
      in: path
      name: namespace
      required: true
      schema:
        type: string

    CollectionName:
      description: 'The collection name'
      in: path
      name: name
      required: true
      schema:
        type: string
        pattern: ^(?!.*__)[a-z]+[0-9a-z_]*$'

    CollectionVersionArtifactFilename:
      description: 'CollectionVersion artifact filename'
      in: path
      name: filename
      required: true
      schema:
        type: string

    PageLimit:
      description: 'Number of results to return per page.'
      in: query
      name: limit
      required: false
      schema:
        type: integer
        default: 10
        minimum: 1
        maximum: 100

    PageOffset:
      description: 'Page offset number within the paginated result set'
      in: query
      name: offset
      required: false
      schema:
        type: integer
        default: 0
        minimum: 0

    SemanticVersion:
      description: 'A Semantic Version string'
      in: path
      name: version
      required: true
      schema:
        $ref: '#/components/schemas/SemanticVersion'

    NamespaceName:
      description: 'Namespace name'
      in: path
      name: name
      required: true
      schema:
        type: string

  requestBodies:
    Collection:
      description: 'A Collection body'
      content:
        application/vnd.api+json:
          schema:
            $ref: '#/components/schemas/Collection'

    CollectionVersionArtifactBody:
      description: "A multipart/form encoded payload including the binary collection artifact file contents and it's sha256sum"
      content:
        multipart/form-data:
          schema:
            $ref: '#/components/schemas/CollectionVersionArtifactData'

    Namespace:
      description: "A Namespace body"
      content:
        application/vnd.api+json:
          schema:
            $ref: '#/components/schemas/Namespace'

  responses:
    Collections:
      description: 'Response containing a page of Collections'
      content:
        application/vnd.api+json:
          schema:
            $ref: '#/components/schemas/CollectionsPage'

    CollectionImport:
      description: The requested Collection Import
      content:
        application/vnd.api+json:
          schema:
            $ref: '#/components/schemas/CollectionImport'

    CollectionImports:
      description: Collection Imports
      content:
        application/vnd.api+json:
          schema:
            $ref: '#/components/schemas/CollectionImportsPage'

    CollectionVersion:
      description: 'Response contain a CollectionVersion'
      content:
        application/vnd.api+json:
          schema:
            $ref: '#/components/schemas/CollectionVersion'

    CollectionVersions:
      description: 'Response containing a page of CollectionVersions'
      content:
        application/vnd.api+json:
          schema:
            $ref: '#/components/schemas/CollectionVersionsPage'

    CollectionVersionArtifactDownload:
      description: 'The collection artifact file binary contents'
      content:
        application/octet-stream:
          schema:
            title: 'CollectionVersionArtifactDownload'
            description: 'The collection artifact file binary contents'
            type: string
            format: binary

    CollectionImportAccepted:
      description: 'Result of an accepted collection import. Includes the url of the import task'
      content:
        application/vnd.api+json:
          schema:
            $ref: '#/components/schemas/CollectionCreationResult'

    CollectionUpdateAccepted:
      description: 'Result of an accepted collection update.'
      content:
        application/vnd.api+json:
          schema:
            $ref: '#/components/schemas/Collection'

    Conflict:
      description: 'Conflict Error'
      content:
        application/vnd.api+json:
          schema:
            $ref: '#/components/schemas/Error'

    DeleteSuccessful:
      description: 'A DELETE operation was successful'

    Error:
      description: 'Error'
      content:
        application/vnd.api+json:
          schema:
            $ref: '#/components/schemas/Error'

    Namespace:
      description: 'Result of creating a Namespace'
      content:
        application/vnd.api+json:
          schema:
            $ref: '#/components/schemas/Namespace'

    Namespaces:
      description: 'Response containing a Page of a list of Namespaces'
      content:
        application/vnd.api+json:
          schema:
            $ref: '#/components/schemas/NamespacesPage'

    NotFound:
      description: 'Not Found (404)'
      content:
        application/vnd.api+json:
          schema:
            $ref: '#/components/schemas/Error'

    Profile:
      description: 'Response with the current User'
      content:
        application/vnd.api+json:
          schema:
            $ref: '#/components/schemas/User'

    Tags:
      description: 'Response with Tags'
      content:
        application/vnd.api+json:
          schema:
            $ref: '#/components/schemas/TagsPage'

    Unauthorized:
      description: 'Unauthorized (401)'
      headers:
        WWW-Authenticate:
          schema:
            type: string
      content:
        application/vnd.api+json:
          schema:
            $ref: '#/components/schemas/Error'

    User:
      description: 'Response with an User'
      content:
        application/vnd.api+json:
          schema:
            $ref: '#/components/schemas/User'

    Users:
      description: 'Response containing a Page of a list of Users'
      content:
        application/vnd.api+json:
          schema:
            $ref: '#/components/schemas/UsersPage'
