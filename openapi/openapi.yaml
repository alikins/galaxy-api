openapi: "3.0.0"

info:
  version: 0.1.0
  title: Galaxy API
  license:
    name: Apache-2.0

paths:

# -------------------------------------
# Namespaces
# -------------------------------------
  '/namespaces/':
    get:
      summary: List namespaces
      operationId: listNamespaces
      tags:
        - Namespaces
      responses:
        '200':
          description: A paginated list of namespaces
        'default':
          $ref: '#/components/responses/Errors'
    post:
      summary: Create a namespace
      tags:
        - Namespaces
      responses:
        '201':
          description: Namespace created successfully
        'default':
          $ref: '#/components/responses/Errors'

  '/namespaces/{name}/':
    get:
      summary: Get Namespace
      operationId: getNamespace
      tags:
        - Namespaces
      responses:
        '200':
          description: The requested Namespace
        'default':
          $ref: '#/components/responses/Errors'
    put:
      summary: Update Namespace
      operationId: updateNamespace
      tags:
        - Namespaces
      responses:
        '200':
          description: Namespace updated successfully
        'default':
          $ref: '#/components/responses/Errors'
    delete:
      summary: Delete Namespace
      operationId: deleteNamespace
      tags:
        - Namespaces
      responses:
        '204':
          description: Namespace deleted successfully
        'default':
          $ref: '#/components/responses/Errors'

# -------------------------------------
# Collections
# -------------------------------------
  '/collections/':
    get:
      summary: List Collections
      operationId: listCollections
      tags:
        - Collections
      responses:
        '200':
          description: A paginated list of collections
        'default':
          $ref: '#/components/responses/Errors'
    post:
      summary: Upload Collection
      operationId: uploadCollection
      tags:
        - Collections

  '/collections/{namespace}/{name}/':
    get:
      summary: Get Collection
      operationId: getCollection
      tags:
        - Collections
      responses:
        '200':
          description: The requested Collection
        'default':
          $ref: '#/components/responses/Errors'

    put:
      summary: Update Collection
      operationId: updateCollection
      tags:
        - Collections

  '/collections/{namespace}/{name}/versions/':
    get:
      summary: List Collection Versions
      operationId: listCollectionVersions
      tags:
        - Collections
      responses:
        '200':
          description: A paginated list of Collection Versions
        'default':
          $ref: '#/components/responses/Errors'

  '/collections/{namespace}/{name}/versions/{version}/':
    get:
      summary: Get Collection Version
      operationId: getCollectionVersions
      tags:
        - Collections
      responses:
        '200':
          description: The requested Collection Version
        'default':
          $ref: '#/components/responses/Errors'

  '/collections/{namespace}/{name}/versions/{version}/artifact/':
    get:
      summary: Get Collection Version
      operationId: getCollectionVersionArtifact
      tags:
        - Collections
      responses:
        '200':
          description: The requested Collection Version Artifact
        'default':
          $ref: '#/components/responses/Errors'

# -------------------------------------
# Imports
# -------------------------------------
  '/imports/collections/':
    get:
      summary: List Collection Imports
      operationId: listCollectionImports
      tags:
        - Imports
      responses:
        '200':
          description: A paginated list of Collection Imports
        'default':
          $ref: '#/components/responses/Errors'

  '/imports/collections/{id}/':
    get:
      summary: Get Collection Import
      operationId: getCollectionImport
      tags:
        - Imports
      responses:
        '200':
          description: The requested Collection Import
        'default':
          $ref: '#/components/responses/Errors'

# -------------------------------------
# Downloads
# -------------------------------------
  '/downloads/collections/{filename}':
    get:
      summary: Download Collection Artifact
      operationId: downloadCollection
      tags:
        - Downloads

# -------------------------------------
# Search
# -------------------------------------
  '/search/collections/':
    get:
      summary: Search Collections
      operationId: searchCollections
      tags:
        - Search
      responses:
        '200':
          description: A paginated list of Collections
        'default':
          $ref: '#/components/responses/Errors'

  '/search/tags/':
    get:
      summary: Search Tags
      operationId: searchTags
      tags:
        - Search
      responses:
        '200':
          description: A paginated list of Tags
        'default':
          $ref: '#/components/responses/Errors'

# -------------------------------------
# Users
# -------------------------------------
  '/users/':
    get:
      summary: List Users
      operationId: listUsers
      tags:
        - Users
      responses:
        '200':
          description: A paginated list of Users
        'default':
          $ref: '#/components/responses/Errors'


  '/users/{id}/':
    get:
      summary: Get User
      operationId: getUser
      tags:
        - Users
      responses:
        '200':
          description: The requested User
        'default':
          $ref: '#/components/responses/Errors'


# -------------------------------------
# Profile
# -------------------------------------
  '/profile/':
    get:
      summary: Get Profile
      operationId: getProfile
      description: Returns information about the current User.
      tags:
        - Profile
      responses:
        '200':
          description: The current User
        'default':
          $ref: '#/components/responses/Errors'

components:
  schemas:
    Errors:
      title: 'Errors'
      description: "A list of JSON API Error objects"
      type: object
      externalDocs:
        description: 'JSON API Error Specification'
        url: 'https://jsonapi.org/format/#errors'
      properties:
        errors:
          type: array
          title: 'Errors'
          items:
            $ref: '#/components/schemas/Error'
          minItems: 1
      required:
        - errors

    Error:
      title: 'Error'
      description: "A JSON API Error object"
      externalDocs:
        description: 'JSON API Error Specification'
        url: 'https://jsonapi.org/format/#error-objects'
      type: object
      properties:
        code:
          description: 'Unique identifier for the error'
          type: string
          example: 'not_found'
        detail:
          type: string
          description: 'A human-readable explanation specific to this occurrence of the problem'
          example: 'Record /unicorn/11 was not found'
        title:
          type: string
          description: 'A short, human-readable summary of the problem'
          example: 'Record not found.'
        status:
          type: string
          description: 'String representation of HTTP status code'
          example: '404'
        source:
          type: object
          properties:
            parameter:
              description: 'A string indicating which URI query parameter caused the error.'
              type: string
            pointer:
              description: 'A JSON Pointer [RFC6901] to the associated entity in the request document '
              type: string
      required:
        - detail
        - status

    PageInfo:
      description: 'Pagination info'
      title: 'Page Info'
      properties:
        meta:
          $ref: '#/components/schemas/PageMeta'
        links:
          $ref: '#/components/schemas/PageLinks'
      required:
        - meta
        - links

    PageLinks:
      type: object
      title: 'PageLinks'
      properties:
        first:
          type: string
          description: 'Link to first page'
          format: uri
          example: '/namespaces/?offset=0&limit=1'
        last:
          type: string
          description: 'Link to last page'
          format: uri
          example: '/namespaces/?offset=7&limit=1'
        next:
          type: string
          description: 'Link to next page'
          format: uri
          example: '/namespaces/?offset=5&limit=1'
          nullable: true
        previous:
          type: string
          description: 'Link to previous page'
          format: uri
          example: '/namespaces/?offset=3&limit=1'
          nullable: true
      required:
        - first
        - last
        - next
        - previous

    PageMeta:
      title: 'PageMeta'
      type: object
      properties:
        count:
          description: 'The number of items in this Page'
          type: integer
          example: 5
      required:
        - count

  parameters:
    PageLimit:
      description: 'Number of results to return per page.'
      in: query
      name: limit
      required: false
      schema:
        type: integer
        default: 10
        minimum: 1
        maximum: 100

    PageOffset:
      description: 'Page offset number within the paginated result set'
      in: query
      name: offset
      required: false
      schema:
        type: integer
        default: 0
        minimum: 0

  responses:
    Errors:
      description: 'Errors'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Errors'
