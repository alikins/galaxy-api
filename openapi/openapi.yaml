info:
  description: 'Galaxy autohub API (wip)'
  title: 'Galaxy autohub API (wip)'
  version: "1.2.0"
  contact:
    url: https://github.com/ansible/galaxy/issues
    name: 'Ansible Galaxy Issues'
    email: notreal@example.invalid

openapi: 3.0.0

servers:
  - url: http://localhost:5001/api/v3
    description: 'local dev server'

externalDocs:
  description: 'General docs about Ansible Galaxy'
  url: https://galaxy.ansible.com/docs/

tags:
  - name: 'collections'
    externalDocs:
      url: https://galaxy.ansible.com/docs/contributing/creating_collections.html
      description: 'Creating Collections docs at galaxy.ansible.com'
  - name: 'collection-imports'
    description: 'Importing Collections'
  - name: 'collection-versions'
    description: 'Versions of Collections'
  - name: 'download'
    description: 'Downloading artifacts'
  - name: 'client_mazer'
    description: 'API used by mazer and or ansible-galaxy'
  - name: 'introspection'
    description: 'API used to gather information about the API itself'
  - name: 'me'
    description: 'API related to the current user.'
  - name: 'search'
    description: 'API for searching'
  - name: 'namespaces'
    description: 'API for Namespaces'
  - name: 'tags'
    description: 'API for Ansible Galaxy tags.'
  - name: 'users'
    description: 'API for Users'

paths:
  '/':
    get:
      summary: 'Get info about the API'
      operationId: GetAPI
      tags:
        - introspection
      parameters: []
      responses:
        '200':
          description: 'A map of endpoints in the API'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIEndpoints'

  '/collections/':
    get:
      summary: 'Get a list of the Collections'
      operationId: GetCollections
      parameters: []
      tags:
        - namespaces
        - collections
      responses:
        '200':
            $ref: '#/components/responses/Collections'

    post:
      summary: 'Create a new CollectionVersion by importing a collection artifact'
      operationId: ImportCollectionVersionArtifact
      tags:
        - collections
        - client_mazer
      security:
        - UserTokenApiKey: []
        - UserBasicAuth: []
        - AdminTokenApiKey: []
        - AdminBasicAuth: []
      parameters: []
      requestBody:
        $ref: '#/components/requestBodies/CollectionVersionArtifactBody'
      responses:
        '202':
          $ref: '#/components/responses/CollectionImportAccepted'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '409':
          $ref: '#/components/responses/Conflict'
        default:
          description: 'Unexpected Error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  '/collections/{ns_name}/{c_name}/':
    parameters:
      - $ref: '#/components/parameters/CollectionNamespace'
      - $ref: '#/components/parameters/CollectionName'
    get:
      summary: 'Get a Collection by namespace and name'
      operationId: GetCollectionByNamespaceName
      tags:
        - collections
        - client_mazer
      responses:
        '200':
          description: 'A Collection'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Collection'

    put:
      summary: 'Update a Collection'
      operationId: UpdateCollectionByNamespaceName
      tags:
        - collections
      security:
        - UserTokenApiKey: []
        - UserBasicAuth: []
        - AdminTokenApiKey: []
        - AdminBasicAuth: []
      parameters: []
      requestBody:
        $ref: '#/components/requestBodies/Collection'
      responses:
        '200':
          $ref: '#/components/responses/CollectionUpdateAccepted'
        '401':
          $ref: '#/components/responses/Unauthorized'

  '/collections/{ns_name}/{c_name}/versions/':
    parameters:
      - $ref: '#/components/parameters/CollectionNamespace'
      - $ref: '#/components/parameters/CollectionName'
    get:
      summary: 'Get a list of CollectionVersions for a Collection by namespace and name'
      operationId: ListCollectionVersionsByNamespaceName
      tags:
        - collections
        - collection-versions
        - client_mazer
      parameters:
        - $ref: '#/components/parameters/Page'
        - $ref: '#/components/parameters/PageSize'
        - $ref: '#/components/parameters/Search'
      responses:
        '200':
          $ref: '#/components/responses/CollectionVersionLinks'

  '/collections/{ns_name}/{c_name}/versions/{version}/':
    parameters:
      - $ref: '#/components/parameters/CollectionNamespace'
      - $ref: '#/components/parameters/CollectionName'
      - $ref: '#/components/parameters/SemanticVersion'
    get:
      summary: 'Get a CollectionVersion by namespace, name, and version'
      operationId: GetCollectionVersion
      tags:
        - collections
        - collection-versions
        - client_mazer
      responses:
        '200':
          $ref: '#/components/responses/CollectionVersion'

  '/collections/{ns_name}/{c_name}/versions/{version}/artifact/':
    parameters:
      - $ref: '#/components/parameters/CollectionNamespace'
      - $ref: '#/components/parameters/CollectionName'
      - $ref: '#/components/parameters/SemanticVersion'
    get:
      summary: 'Get Artifact details for a Collection by namespace, name, and version'
      operationId: GetCollectionVersionArtifact
      tags:
        - collections
        - collection-versions
        - client_mazer
      parameters:
        - $ref: '#/components/parameters/Search'
      responses:
        '200':
          $ref: '#/components/responses/CollectionVersionArtifact'

  '/download/collections/{filename}':
    get:
      summary: 'Download the collection artifact'
      operationId: DownloadArtifactByFilename
      tags:
        - download
        - client_mazer
      parameters:
        - $ref: '#/components/parameters/CollectionVersionArtifactFilename'
      responses:
        '200':
          $ref: '#/components/responses/CollectionVersionArtifactDownload'

  '/imports/collections/{task_id}':
    get:
      summary: 'Get a Collection-Import (import task) by id'
      operationId: GetCollectionImportById
      tags:
        - collection-imports
      parameters:
        - description: 'A unique integer value identifying a collection import.'
          in: path
          name: task_id
          required: true
          schema:
            type: string
        - $ref: '#/components/parameters/Search'
      responses:
        '200':
          description: 'The result of a collection import'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CollectionImportTask'

  '/me/':
    get:
      summary: 'Get the User info for the current user'
      operationId: GetMeDetail
      tags:
        - me
      security:
        - UserTokenApiKey: []
        - UserBasicAuth: []
      parameters:
        - $ref: '#/components/parameters/Search'
      responses:
        '200':
          description: 'Response with the current User'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'

  '/namespaces/':
    get:
      summary: 'Get a list of Namespaces'
      operationId: ListNamespaces
      tags:
        - namespaces
      parameters:
        - $ref: '#/components/parameters/Page'
        - $ref: '#/components/parameters/PageSize'
        - $ref: '#/components/parameters/Search'
      responses:
        '200':
          $ref: '#/components/responses/Namespaces'

    post:
      operationId: 'CreateNamespace'
      summary: 'Create a Namespace'
      parameters: []
      security:
        - AdminTokenApiKey: []
        - AdminBasicAuth: []
      requestBody:
        $ref: '#/components/requestBodies/Namespace'
      responses:
        '201':
            $ref: '#/components/responses/Namespace'
      tags:
        - namespaces

  '/namespaces/{ns_name}/':
    get:
      summary: 'Get a Namespace'
      operationId: GetNamespace
      parameters:
        - $ref: '#/components/parameters/NamespaceName'
      tags:
        - namespaces
      responses:
        '200':
            $ref: '#/components/responses/Namespace'
    delete:
      summary: 'Delete a Namespace'
      operationId: DeleteNamespace
      parameters:
        - $ref: '#/components/parameters/NamespaceName'
      security:
        - AdminTokenApiKey: []
        - AdminBasicAuth: []
      responses:
        '204':
          $ref: '#/components/responses/DeleteSuccessful'
      tags:
        - namespaces

  '/namespaces/{ns_name}/collections':
    get:
      summary: 'Get a list of the Collections for a Namespace'
      operationId: GetCollectionsByNamespace
      parameters:
        - $ref: '#/components/parameters/NamespaceName'
      tags:
        - namespaces
        - collections
      responses:
        '200':
            $ref: '#/components/responses/Collections'

  '/namespaces/{ns_name}/imports/collections':
    get:
      summary: 'Get a list of the CollectionImports for a Namespace'
      operationId: GetCollectionImportsByNamespace
      parameters:
        - $ref: '#/components/parameters/NamespaceName'
      tags:
        - namespaces
        - collection-imports
      responses:
        '200':
            $ref: '#/components/responses/CollectionImportTasks'

  '/search/':
    get:
      summary: 'Get info about the search API'
      operationId: GetApiSearch
      tags:
        - search
        - introspection
      parameters: []
      responses:
        '200':
          description: 'A map of endpoints in the search API'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIEndpoints'

  '/search/collections/':
    get:
      summary: 'Get a list of Collections by searching'
      operationId: ListCollectionsBySearch
      tags:
        - search
        - collections
      parameters:
        - $ref: '#/components/parameters/Page'
        - $ref: '#/components/parameters/PageSize'
        # TODO: search param collections
      responses:
        '200':
          $ref: '#/components/responses/Collections'

  '/search/tags/':
    get:
      summary: 'Get a list of Tags by searching'
      operationId: ListTagBySearch
      tags:
        - search
        - tags
      parameters:
        - $ref: '#/components/parameters/Page'
        - $ref: '#/components/parameters/PageSize'
        # TODO: search param tags
      responses:
        '200':
          $ref: '#/components/responses/Tags'

  '/users/':
    get:
      summary: 'Get a list of Users'
      operationId: ListUsers
      tags:
        - users
      parameters:
        - $ref: '#/components/parameters/Page'
        - $ref: '#/components/parameters/PageSize'
        - $ref: '#/components/parameters/Search'
      responses:
        '200':
          $ref: '#/components/responses/Users'

  '/users/{id}/':
    get:
      summary: 'Get an User by id'
      operationId: GetUserById
      tags:
        - users
      parameters:
        - $ref: '#/components/parameters/UserId'
        - $ref: '#/components/parameters/Search'
      responses:
        '200':
          description: 'Response with a User'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'

    patch:
      summary: 'Patch/update an User by id'
      operationId: PatchUserById
      tags:
        - users
      parameters:
        - $ref: '#/components/parameters/UserId'
        - $ref: '#/components/parameters/Search'
      security:
        - UserTokenApiKey: []
        - UserBasicAuth: []
        - AdminTokenApiKey: []
        - AdminBasicAuth: []
      requestBody:
        description: 'An User to update to'
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserUpdate'
      responses:
        '200':
          description: 'The User updated by the PATCH'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'

components:
  schemas:

    APIEndpoints:
      description: 'Map of API endpoint names to URLS'
      type: object
      additionalProperties:
        type: string

    APIException:
      type: object
      description: 'API Exception'
      properties:
        code:
          description: 'Unique identifier for the exception'
          type: string
          example: 'not_authenticated'
        message:
          type: string
          example: 'Authentication credentials were not provided.'
        errors:
          description: 'A list of additional error objects'
          type: array
          items:
            $ref: '#/components/schemas/Error'
      required:
        - code
        - message

    ArtifactExistsError:
      allOf:
        - $ref: '#/components/schemas/ConflictError'

    Author:
      description: 'Author of a collection or role'
      type: string
      format: email
      # TODO: add Author validation pattern
      example: 'Adrian Likins <alikins@redhat.com>'

    Collection:
      description: 'An Ansible Collection'
      type: object
      properties:
        latest_version:
          $ref: '#/components/schemas/CollectionVersionLink'
        created:
          type: string
          readOnly: true
        deprecated:
          type: boolean
        name:
          type: string
        namespace:
          $ref: '#/components/schemas/CollectionNamespace'
        modified:
          type: string
          readOnly: true
        id:
          type: integer
          readOnly: true
        href:
          type: string
          format: uri
        versions_url:
          type: string

    CollectionsPage:
      description: 'A page of a list of Collections'
      allOf:
        - $ref: '#/components/schemas/PageInfo'
        - type: object
          properties:
            results:
              description: 'List of Collections for this Page'
              title: 'Collections'
              type: array
              items:
                $ref: '#/components/schemas/Collection'
          required:
            - results

    CollectionImportError:
      title: 'CollectionImportError'
      type: object
      properties:
        code:
          type: string
        description:
          type: string
        traceback:
          type: string

    CollectionImportMessage:
      title: 'CollectionImportError'
      description: 'Message from collection importer including lint results'
      type: object
      properties:
        level:
          type: string
        message:
          type: string
        time:
          type: string
          format: date-time
      required:
        - level
        - message
        - time

    CollectionImportLintRecord:
      title: 'CollectionImportLintRecord'
      description: 'Records from collection linters'
      type: object
      properties:
        code:
          type: string
        type:
          type: string
        message:
          type: string
        severity:
          type: integer
        score_type:
          type: string
          nullable: true

    CollectionCreationResult:
      title: 'CollectionCreationResult'
      description: 'A map of collection import task info, including its url'
      type: object
      properties:
        task:
          description: 'The url for the queued collection import task. Check it for progress and status.'
          type: string
          format: uri

    CollectionImportTask:
      description: 'Collection import task detail'
      title: 'CollectionImportTask'
      type: object
      properties:
        _href:
          description: 'URL for this CollectionImportTask'
          type: string
          format: uri
        task_type:
          $ref: '#/components/schemas/TaskType'
        name:
          maxLength: 64
          type: string
        error:
          $ref: '#/components/schemas/CollectionImportError'
        finished_at:
          type: string
          format: date-time
        started_at:
          type: string
          format: date-time
        state:
          type: string
        # CollectionImportTasks specific
        id:
          type: integer
        imported_version:
          type: string
          readOnly: true
        job_id:
          type: string
          format: uuid
        lint_records:
          type: array
          title: 'CollectionImportLintRecords'
          items:
            $ref: '#/components/schemas/CollectionImportLintRecord'
        messages:
          type: array
          title: 'CollectionImportMessages'
          items:
            $ref: '#/components/schemas/CollectionImportMessage'
        namespace:
          type: string
        version:
          maxLength: 64
          type: string
      required:
        - error
        - finished_at
        - id
        - job_id
        - lint_records
        - messages
        - name
        - namespace
        - started_at
        - state
        - version

    CollectionImportTasksPage:
      description: 'A page of a list of CollectionImportTask'
      allOf:
        - $ref: '#/components/schemas/PageInfo'
        - type: object
          properties:
            results:
              description: 'List of CollectionImportTask for this Page'
              title: 'CollectionImportTasks'
              type: array
              items:
                $ref: '#/components/schemas/CollectionImportTask'
          required:
            - results

    CollectionName:
      description: 'The name of a Collection'
      type: string
      example: 'my_collection'
      pattern: '^(?!.*__)[a-z]+[0-9a-z_]*$'

    CollectionNamespaceName:
      description: 'The name of the Collection Namespace'
      type: string
      example: 'my_namespace'
      pattern: '^(?!.*__)[a-z]+[0-9a-z_]*$'

    CollectionNamespace:
      description: 'The Collection Namespace'
      type: object
      properties:
        name:
          $ref: '#/components/schemas/CollectionNamespaceName'
        id:
          type: integer
        href:
          description: 'link to the Namespace'
          type: string
          format: uri

    CollectionVersion:
      description: 'Collection Version'
      title: 'Collection Version'
      type: object
      properties:
        artifact:
          $ref: '#/components/schemas/CollectionVersionDetailArtifact'
        metadata:
          $ref: '#/components/schemas/CollectionVersionDetailMetadata'
        hidden:
          type: boolean
        download_url:
          type: string
          format: uri
        namespace:
          $ref: '#/components/schemas/CollectionNamespace'
        id:
          type: integer
        href:
          type: string
          format: uri
        collection:
          $ref: '#/components/schemas/CollectionVersionDetailCollection'

    CollectionVersionArtifactData:
      description: 'CollectionVersionArtifact archive file binary and sha256 checksum. Used for importing collection artifacts'
      type: object
      properties:
        sha256:
          description: 'The sha256sum of the collection artifact file'
          type: string
        file:
          description: 'The binary contents of a collection artifact'
          type: string
          format: binary

    CollectionVersionArtifactDetail:
      type: object
      title: 'CollectionVersionArtifactDetail'
      properties:
        download_url:
          readOnly: true
          type: string
        filename:
          readOnly: true
          type: string
        sha256:
          type: string
        size:
          type: integer

    CollectionVersionArtifactsPage:
      description: 'A page of a list of CollectionVersionArtifacts'
      allOf:
        - $ref: '#/components/schemas/PageInfo'
        - type: object
          properties:
            results:
              description: 'List of CollectionVersionArtifacts for this Page'
              title: 'CollectionVersionArtifacts'
              type: array
              items:
                $ref: '#/components/schemas/CollectionVersionArtifactDetail'
          required:
            - results

    CollectionVersionDependencies:
      description: 'A map of collection namespace.name to a semantic version'
      type: object
      additionalProperties:
        $ref: '#/components/schemas/SemanticVersionSpec'

    CollectionVersionDetailArtifact:
      type: object
      properties:
        filename:
          type: string
        size:
          type: integer
        sha256:
          type: string

    CollectionVersionDetailCollection:
      type: object
      properties:
        name:
          type: string
        id:
          type: integer
        href:
          description: 'link to the Collection'
          type: string
          format: uri

    CollectionVersionDetailMetadata:
      description: "The Collection Version metadata from collections galaxy.yml or MANIFEST.JSON"
      type: object
      properties:
        documentation:
          description: 'Documentation URL'
          type: string
          format: uri
          nullable: true
        description:
          description: 'Description of the collection'
          type: string
          nullable: true
        readme:
          description: 'Name of file to use for README'
          type: string
          format: relative-file-path
        repository:
          description: 'SCM repository for collection'
          type: string
          format: uri
          nullable: true
        issues:
          description: 'URL of issues or bug tracking'
          type: string
          format: uri
          nullable: true
        version:
          $ref: '#/components/schemas/SemanticVersion'
        license_file:
          description: 'Name of file where license info can be found'
          type: string
          format: relative-file-path
          nullable: true
        tags:
          type: array
          items:
            $ref: '#/components/schemas/GalaxyTag'
        dependencies:
          $ref: '#/components/schemas/CollectionVersionDependencies'
        license:
          description: 'A list of SPDX license ids'
          type: array
          items:
            $ref: '#/components/schemas/CollectionVersionLicense'
        name:
          $ref: '#/components/schemas/CollectionName'
        namespace:
          $ref: '#/components/schemas/CollectionNamespaceName'
        authors:
          description: 'A list of collection authors'
          type: array
          items:
            $ref: '#/components/schemas/Author'
        homepage:
          type: string
          format: uri
      required:
        - namespace
        - name
        - version

    CollectionVersionLicense:
      description: 'A SPDX license id'
      type: string
      # TODO: This could in theory be an enum

    CollectionVersionLink:
      type: object
      title: 'CollectionVersionLink'
      properties:
        href:
          description: 'The URL to the CollectionVersion'
          type: string
        version:
          type: string
          maxLength: 64

    CollectionVersionLinksPage:
      description: 'A page of a list of CollectionVersionLinks'
      allOf:
        - $ref: '#/components/schemas/PageInfo'
        - type: object
          properties:
            results:
              description: 'List of CollectionVersionLinks for this Page'
              title: 'CollectionVersionLinks'
              type: array
              items:
                $ref: '#/components/schemas/CollectionVersionLink'
          required:
            - results

    ConflictError:
      title: 'ConflictError'
      allOf:
        - $ref: '#/components/schemas/APIException'

    ConflictCollectionExistsError:
      allOf:
        - $ref: '#/components/schemas/ConflictError'

    Error:
      type: object
      description: 'Error data'
      properties:
        code:
          description: 'Unique identifier for the error'
          type: string
          example: 'invalid'
        message:
          type: string
          example: 'namespace and name parameters are required'
        field:
          description: 'The name of the field involved'
          type: string
          example: 'namespace'
      required:
        - code
        - message

    GalaxyTag:
      description: 'A Galaxy Tag'
      type: string
      pattern: '^[a-z0-9]+$'
      example: 'development'
      maxLength: 512

    Namespace:
      title: 'Namespace'
      description: 'A Namespace'
      allOf:
        - $ref: '#/components/schemas/DBBaseModel'
        - type: object
          properties:
            name:
              maxLength: 512
              type: string
          required:
            - name

    NamespacesPage:
      description: "A Page of a list of Namespaces"
      allOf:
        - $ref: '#/components/schemas/PageInfo'
        - type: object
          properties:
            results:
              description: 'List of Namespaces for this Page'
              title: 'Namespaces'
              type: array
              items:
                $ref: '#/components/schemas/Namespace'
          required:
            - results

    RepositoryNameError:
      allOf:
        - $ref: '#/components/schemas/ConflictError'

    ValidationError:
      allOf:
        - $ref: '#/components/schemas/APIException'

    PageCount:
      type: integer

    PageInfo:
      description: 'Pagination info'
      title: 'Page Info'
      properties:
        count:
          $ref: '#/components/schemas/PageCount'
        next:
          $ref: '#/components/schemas/PageNext'
        previous:
          $ref: '#/components/schemas/PagePrevious'
        result_type:
          type: string
          description: 'The type of object in the results list'
          nullable: true

    PageNext:
      type: string
      format: uri

    PagePrevious:
      description: 'The previous page'
      type: string
      format: uri

    SemanticVersion:
      description: 'A version string in the Semantic Version form'
      type: string
      pattern: ^((([0-9]+)\.([0-9]+)\.([0-9]+)(?:-([0-9a-zA-Z-]+(?:\.[0-9a-zA-Z-]+)*))?)(?:\+([0-9a-zA-Z-]+(?:\.[0-9a-zA-Z-]+)*))?)$
      example: '1.0.1'

    SemanticVersionSpec:
      description: 'A string to match against SemanticVersion'
      type: string
      example: '>=1.0.0'

    Tag:
      title: 'Tag'
      description: 'A Galaxy Tag'
      allOf:
        - $ref: '#/components/schemas/DBBaseModel'
        - $ref: '#/components/schemas/GalaxyTag'
          required:
            - name

    TagsPage:
      description: "A page of a list of Galaxy Tags"
      title: 'Tags Page'
      allOf:
        - $ref: '#/components/schemas/PageInfo'
        - type: object
          properties:
            results:
              description: 'List of Tags for this Page'
              title: 'Tags'
              type: array
              items:
                $ref: '#/components/schemas/Tag'
          required:
            - results

    TaskType:
      description: 'The type of Task'
      type: string
      enum:
        - 'collection-import'

    User:
      description: 'A User'
      title: 'User'
      allOf:
        - $ref: '#/components/schemas/DBBaseModel'
        - type: object
          properties:
            avatar_url:
              maxLength: 256
              type: string
            date_joined:
              format: date-time
              type: string
            email:
              maxLength: 256
              nullable: true
              type: string
              format: email
            first_name:
              maxLength: 30
              type: string
            last_name:
              maxLength: 30
              type: string
            is_active:
              readOnly: true
              type: boolean
            is_staff:
              readOnly: true
              type: boolean
            is_superuser:
              readOnly: true
              type: boolean
            username:
              description: >-
                Required. 30 characters or fewer. Letters, numbers and
                @/./+/-/_ characters
              maxLength: 30
              pattern: '^[a-zA-Z0-9_.@+-]+$'
              type: string
          required:
            - username

    UsersPage:
      description: "A page of a list of Users"
      allOf:
        - $ref: '#/components/schemas/PageInfo'
        - type: object
          properties:
            results:
              description: 'List of Users for this Page'
              title: 'Users'
              type: array
              items:
                $ref: '#/components/schemas/User'
          required:
            - results

    UserUpdate:
      description: 'User data to update'
      properties:
        avatar_url:
          maxLength: 256
          type: string
        date_joined:
          format: date-time
          type: string
        full_name:
          maxLength: 254
          type: string
        username:
          description: >-
            Required. 30 characters or fewer. Letters, numbers and
            @/./+/-/_ characters
          maxLength: 30
          pattern: '^[a-zA-Z0-9_.@+-]+$'
          type: string

    DBBaseModel:
      description: 'Base for common shared attributes for db models'
      type: object
      properties:
        id:
          description: 'Database ID for this object.'
          readOnly: true
          type: integer
        url:
          description: 'URL for this resource.'
          readOnly: true
          type: string
          format: uri
        modified:
          description: 'Timestamp when this object was last modified.'
          readOnly: true
          type: string
        created:
          description: 'Timestamp when this object was created.'
          readOnly: true
          type: string
      required:
        - id

  responses:
    Collections:
      description: 'Response containing a page of Collections'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Collection'

    CollectionUpdateAccepted:
      description: 'Result of an accepted collection update.'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Collection'

    CollectionImportAccepted:
      description: 'Result of an accepted collection import. Includes the url of the import task'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/CollectionCreationResult'

    CollectionImportTasks:
      description: 'Response containing a page of CollectionImportTask'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/CollectionImportTasksPage'

    CollectionVersionLinks:
      description: 'Response containing a page of CollectionVersionLinks'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/CollectionVersionLinksPage'

    CollectionVersion:
      description: 'Response contain a CollectionVersion'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/CollectionVersion'
      links:
        GetCollectionVersionById:
          operationId: GetCollectionVersionById
          parameters:
            id: '$response.body#/id'
          description: >
            The `id` value returned in the response can be used as
            the `id` parameter in `{method} GET /collection-versions/{id}`.
        GetCollectionById:
          operationId: GetCollectionById
          parameters:
            id: '$response.body#/collection/id'
        DownloadArtifactByFilename:
          operationId: DownloadArtifactByFilename
          parameters:
            id: '$response.body#/artifact/filename'
          description: >
            The `filename` value returned in the response can be used as
            the `filename` parameter in `GET /download/{filename}`.

    CollectionVersionArtifact:
      description: 'The collection version artifact details with download_url, sha256, and filename'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/CollectionVersionArtifactDetail'

    CollectionVersionArtifacts:
      description: 'Response containing a page of CollectionVersionArtifacts'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/CollectionVersionArtifactsPage'

    CollectionVersionArtifactDownload:
      description: 'The collection artifact file binary contents'
      content:
        application/octet-stream:
          schema:
            title: 'CollectionVersionArtifactDownload'
            description: 'The collection artifact file binary contents'
            type: string
            format: binary

    Conflict:
      description: 'Conflict Error'
      content:
        application/json:
          schema:
            oneOf:
              - $ref: '#/components/schemas/ConflictError'
            discriminator:
              propertyName: code
              mapping:
                conflict: '#/components/schemas/ConflictError'
                conflict.collection_exists: '#/components/schemas/ConflictCollectionExistsError'
                conflict.repository_name_conflict: '#/compontents/schemas/RepositoryNameError'
                conflict.artifact_exists: '#/compontents/schemas/ArtifactExistsError'

    DeleteSuccessful:
      description: 'A DELETE operation was successful'

    Namespace:
      description: 'Result of creating a Namespace'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Namespace'

    Namespaces:
      description: 'Response containing a Page of a list of Namespaces'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/NamespacesPage'

    NotFound:
      description: 'Not Found (404)'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/APIException'

    Tags:
      description: 'Response containing a Page of a list of Tags'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/TagsPage'

    Unauthorized:
      description: 'Authorization error'
      headers:
        WWW-Authenticate:
          schema:
            type: string
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/APIException'

    Users:
      description: 'Response containing a Page of a list of Users'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/UsersPage'

  parameters:
    CollectionId:
      description: 'The Collection id'
      in: path
      name: id
      required: true
      schema:
        type: string

    CollectionNamespace:
      description: 'The collection namespace'
      in: path
      name: ns_name
      required: true
      schema:
        type: string

    CollectionName:
      description: 'The collection name'
      in: path
      name: c_name
      required: true
      schema:
        type: string
        pattern: ^(?!.*__)[a-z]+[0-9a-z_]*$'

    CollectionVersionArtifactFilename:
      description: 'CollectionVersion artifact filename'
      in: path
      name: filename
      required: true
      schema:
        type: string

    NamespaceName:
      description: 'The Namespace name'
      in: path
      name: ns_name
      required: true
      schema:
        type: string

    Page:
      description: 'Page number within the paginated result set.'
      in: query
      name: page
      required: false
      schema:
        type: integer
        default: 1

    PageSize:
      description: 'Number of results to return per page.'
      in: query
      name: page_size
      required: false
      schema:
        type: integer
        default: 10
        minimum: 0
        maximum: 1000

    Search:
      description: 'Term to search for'
      in: query
      name: search
      required: false
      schema:
        type: string

    SemanticVersion:
      description: 'A Semantic Version string'
      in: path
      name: version
      required: true
      schema:
        $ref: '#/components/schemas/SemanticVersion'

    TaskType:
      description: 'Task type'
      in: query
      name: task_type
      required: false
      schema:
        $ref: '#/components/schemas/TaskType'

    UserId:
      description: 'User id'
      in: path
      name: id
      required: true
      schema:
        type: string

  requestBodies:
    Collection:
      description: 'A Collection body'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Collection'

    CollectionVersionArtifactBody:
      description: "A multipart/form encoded payload including the binary collection artifact file contents and it's sha256sum"
      content:
        multipart/form-data:
          schema:
            $ref: '#/components/schemas/CollectionVersionArtifactData'

    Namespace:
      description: "A Namespace body"
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Namespace'

  securitySchemes:
    # FIXME: kind of faking rbac
    AdminBasicAuth:
      type: http
      scheme: basic
    UserBasicAuth:
      type: http
      scheme: basic
    UserTokenApiKey:
      description: Provide a Galaxy API token in "Authorization" header with value in form "Token {api_key}"
      type: apiKey
      in: header
      name: Authorization
    AdminTokenApiKey:
      description: Provide a Galaxy API token in "Authorization" header with value in form "Token {api_key}"
      type: apiKey
      in: header
      name: Authorization
